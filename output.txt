LICENSE
MIT License

Copyright (c) 2024 Shahin Rahimi

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


Makefile
build:
	@go build -o ./bin/goextractor

run: build
	@./bin/goextractor

README.md
# goExtractor

`goExtractor` is a Go-based command-line tool that allows you to search for files with specific extensions in a target directory (and its subdirectories) while excluding files and directories specified in a `.gitignore` file. It compiles the contents of these files into a single output file.

## Features

- Specify file extensions to include.
- Define a target directory to search.
- Exclude files and directories based on `.gitignore` patterns.
- Combine contents of matching files into a single output file.
- Exclude hidden files and directories by default.

## Requirements

- Go 1.22.4 or later.

## Installation

Clone the repository and build the executable:

```sh
git clone https://github.com/shahinrahimi/goExtractor.git
cd goExtractor
make build
```
This will create an executable file named goextractor in the ./bin directory.

## Usage
Run the executable with the following options:
```sh
./bin/goextractor -ext=<extensions> -target=<directory> -output=<output_file>
```
## Options
- -ext: Comma-separated list of file extensions to include (e.g., go,py,tsx). If not provided, all files except .txt files are included.
- -target: Target directory to search for files. Default is the current working directory.
- -output: Output file to write the contents. Default is output.txt in the current working directory.

## Examples
Extract all .go and .py files
```sh
./bin/goextractor -ext=go,py
```
Specify a target directory
```sh
./bin/goextractor -ext=go,py -target=/path/to/directory
```
Specify an output file
```sh
./bin/goextractor -ext=go,py -target=/path/to/directory -output=results.txt
```
## Building the Project
To build the project, simply run:
```sh
make build
```
This will compile the goextractor executable and place it in the ./bin directory.
## Running Project
To build and run the project in one step, use:
```sh
make run
```
## Contributing
Contributions are welcome! Please feel free to submit a Pull Request.
1. Fork the repository.
2. Create a new branch (git checkout -b feature-branch).
3. Commit your changes (git commit -am 'Add new feature').
4. Push to the branch (git push origin feature-branch).
5. Create a new Pull Request.

## License
This project is licensed under the MIT License. See the LICENSE file for details.





go.mod
module goExtractor

go 1.22.4


main.go
package main

import (
	"bufio"
	"flag"
	"fmt"
	"os"
	"path/filepath"
	"strings"
)

func main() {
	extensions := flag.String("ext", "", "Comma-separated list of file extensions to include (e.g., go,py,tsx)")
	targetDir := flag.String("target", "", "Target directory to search for files (default is current working directory)")
	outputFile := flag.String("output", "output.txt", "Output file to write the contents (default is output.txt in the current working directory)")

	flag.Usage = func() {
		fmt.Fprintf(flag.CommandLine.Output(), "Usage of %s:\n", os.Args[0])
		flag.PrintDefaults()
	}

	flag.Parse()

	// Get the current working directory
	workingDir, err := os.Getwd()
	if err != nil {
		fmt.Printf("Error getting current working directory: %v\n", err)
		os.Exit(1)
	}

	// Set default target directory to the current working directory
	if *targetDir == "" {
		*targetDir = workingDir
	}

	// Set default output file path to the current working directory if not specified
	if !filepath.IsAbs(*outputFile) {
		*outputFile = filepath.Join(workingDir, *outputFile)
	}

	exts := []string{}
	if *extensions != "" {
		exts = strings.Split(*extensions, ",")
	}
	extMap := make(map[string]bool)
	for _, ext := range exts {
		extMap["."+ext] = true
	}

	gitignorePatterns := readGitignore(*targetDir)

	var files []string
	err = filepath.Walk(*targetDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}

		relativePath, err := filepath.Rel(*targetDir, path)
		if err != nil {
			return err
		}

		// Exclude hidden files and directories
		if strings.HasPrefix(info.Name(), ".") {
			if info.IsDir() && info.Name() == ".git" {
				return filepath.SkipDir
			}
			return nil
		}

		// Exclude files based on .gitignore patterns
		if matchesGitignore(relativePath, gitignorePatterns) {
			if info.IsDir() {
				return filepath.SkipDir
			}
			return nil
		}

		if !info.IsDir() {
			// If extensions are provided, filter by extensions
			if len(extMap) > 0 {
				if extMap[filepath.Ext(path)] {
					files = append(files, path)
				}
			} else {
				// If no extensions are provided, exclude .txt files
				if filepath.Ext(path) != ".txt" {
					files = append(files, path)
				}
			}
		}
		return nil
	})

	if err != nil {
		fmt.Printf("Error walking the path %v: %v\n", *targetDir, err)
		os.Exit(1)
	}

	var output []byte
	for _, file := range files {
		data, err := os.ReadFile(file)
		if err != nil {
			fmt.Printf("Error reading file %v: %v\n", file, err)
			continue
		}
		relativePath, err := filepath.Rel(*targetDir, file)
		if err != nil {
			fmt.Printf("Error getting relative path for file %v: %v\n", file, err)
			continue
		}
		output = append(output, []byte(fmt.Sprintf("%s\n%s\n\n", relativePath, string(data)))...)
	}

	err = os.WriteFile(*outputFile, output, 0644)
	if err != nil {
		fmt.Printf("Error writing to output file %v: %v\n", *outputFile, err)
		os.Exit(1)
	}

	fmt.Printf("Successfully wrote to %v\n", *outputFile)
}

// readGitignore reads the .gitignore file in the target directory and returns a list of patterns
func readGitignore(targetDir string) []string {
	var patterns []string
	gitignorePath := filepath.Join(targetDir, ".gitignore")
	file, err := os.Open(gitignorePath)
	if err != nil {
		return patterns
	}
	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		// Ignore comments and empty lines
		if strings.TrimSpace(line) != "" && !strings.HasPrefix(line, "#") {
			patterns = append(patterns, line)
		}
	}

	if err := scanner.Err(); err != nil {
		fmt.Printf("Error reading .gitignore file: %v\n", err)
	}

	return patterns
}

// matchesGitignore checks if a file path matches any of the .gitignore patterns
func matchesGitignore(path string, patterns []string) bool {
	for _, pattern := range patterns {
		matched, _ := filepath.Match(pattern, path)
		if matched {
			return true
		}
		// Check for directory patterns
		if strings.HasSuffix(pattern, "/") && strings.HasPrefix(path, strings.TrimSuffix(pattern, "/")) {
			return true
		}
	}
	return false
}


